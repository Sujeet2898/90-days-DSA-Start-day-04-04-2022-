Q1.  Time Complexity
---------------------------------------------
What is the worst case and average case time complexity of searching a node in a BST?
---------------------------------------------
Options
This problem has only one correct answer:-
1. O(n) and O(nlog(n))
2. O(n) and O(log(n)) 
3. O(log(n)) and O(log(n))
4. O(log(n)) and O(n)
Answer(2)

*********************************************

Q2.  Height of BST
--------------------------------------------
What is the minimum height of a Binary search tree with 14 nodes?
--------------------------------------------
Options
This problem has only one correct answer:-
1. 3
2. 4 
3. 5
4. 6
Answer(2)

*********************************************

Q3.  Height of BST- 2
--------------------------------------------
You are given with the nodes of a binary search tree . Find the height of the BST.
15 , 10 , 5 , 9 , 18 , 29 , 3 , 2.
(Starting from an empty tree , insert 15(root of the tree) and then insert 10 and so on.)
Height of tree with single node is 1.
--------------------------------------------
Answer
5
--

********************************************

Q4.  Insertion in BST
--------------------------------------------
Which one of the following is the tightest upper bound that represents the time complexity of inserting an object into a binary search tree of n nodes?
--------------------------------------------
Options
This problem may have one or more correct answers:-
1. O(1)
2. O(log n)
3. O(n) 
4. O(n log n)
Answer(3)

**********************************************

Q5.  Deletetion of node in BST
----------------------------------------------
Which node can be used to replace the deleted node of a BST? (The deleted node has both left and right child)
----------------------------------------------
Options
This problem may have one or more correct answers:-
1. Inorder successor 
2. Preorder successor
3. Postorder successor
4. Inorder predecessor 
Answer(1,4)

**********************************************

Q6. Insertion/deletion in BST
----------------------------------------------
What are the worst-case complexities of insertion and deletion of a key in a binary search tree?
----------------------------------------------
Options
This problem may have one or more correct answers:-
1. θ (log(n)) for both insertion and deletion
2. θ (n) for both insertion and deletion 
3. θ (n) for insertion and θ (log ) n for deletion
4. θ (log (n)) for insertion and θ (n) for deletion
Answer(2)

**********************************************















