Q1.  Correct Output
--------------------
What will be the correct output of the code, If the linked list is 1->2->3->4->5->6 and start stores the address of node 1.

void fun(Node start)
{
  if(start == null)
    return;
  System.out.printf( start.data); 

  if(start.next != null )
    fun(start.next.next);
  System.out.printf(start.data);
}
-------------------
Options
This problem has only one correct answer:-
1. 1 3 5
2. 1 2 4
3. 1 2 4 4 2 1
4. 1 3 5 5 3 1 

Solution Description(4)
:- fun() prints alternate nodes of the given Linked List, first from head to end, and then from end to head. If Linked List has even number of nodes, then skips the last node.

************************************

Q2.  Time Complexity
--------------------
What are the time complexities of finding 6th element from beginning and 6th element from end in a singly linked list? Let n be the number of nodes in linked list, you may assume that n > 7.
------------
Options
This problem has only one correct answer:-
1. O(1) and O(n) 
2. O(n) and O(n)
3. O(1) and O(1)
4. O(n) and O(1)

Solution(1)

******************









